---
title: "Lab 6"
---
```{r}
library(tidyverse)
library(tidymodels)
library(powerjoin)
library(glue)
library(vip)
library(baguette)
library(ggthemes)
library(patchwork)
library(xgboost)
library(parsnip)
library(workflows)
library(caret)
library(tune)
library(kernlab)
```
# Question 1 
```{r}
root  <- 'https://gdex.ucar.edu/dataset/camels/file'
```

```{r}
download.file('https://gdex.ucar.edu/dataset/camels/file/camels_attributes_v2.0.pdf', 
              'data/camels_attributes_v2.0.pdf')
```
```{r}
# Question 1: 
types <- c("clim", "geol", "soil", "topo", "vege", "hydro")
# Where the files live online ...
remote_files  <- glue('{root}/camels_{types}.txt')
# where we want to download the data ...
local_files   <- glue('data/camels_{types}.txt')
walk2(remote_files, local_files, download.file, quiet = TRUE)
# Read and merge data
camels <- map(local_files, read_delim, show_col_types = FALSE) 
camels <- power_full_join(camels ,by = 'gauge_id')
# Question 2 
# zero_q_freq means frequency of days with Q = mm/day in percentage
```
# Question 2 
```{r}
ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = q_mean)) +
  scale_color_gradient(low = "pink", high = "dodgerblue") +
  ggthemes::theme_map()
```
```{r}
p1 <- ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = aridity)) +
  scale_color_gradient(low = "blue", high = "yellow") +
  ggthemes::theme_map() +
  labs(title = "Aridity (PET to Precipitation Ratio)")

p2 <- ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = p_mean)) +
  scale_color_gradient(low = "red", high = "dodgerblue") +
  ggthemes::theme_map() +
  labs(title = "Mean Daily Precipitation")

p1 + p2
```
# Model Preperation
```{r}
camels |> 
  select(aridity, p_mean, q_mean) |> 
  drop_na() |> 
  cor()
```
# Visual EDA 
```{r}
# Create a scatter plot of aridity vs rainfall
ggplot(camels, aes(x = aridity, y = p_mean)) +
  # Add points colored by mean flow
  geom_point(aes(color = q_mean)) +
  # Add a linear regression line
  geom_smooth(method = "lm", color = "red", linetype = 2) +
  # Apply the viridis color scale
  scale_color_viridis_c() +
  # Add a title, axis labels, and theme (w/ legend on the bottom)
  theme_linedraw() + 
  theme(legend.position = "bottom") + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow")
```
```{r}
ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  scale_color_viridis_c() +
  # Apply log transformations to the x and y axes
  scale_x_log10() + 
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom") + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow")
```
```{r}
ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  # Apply a log transformation to the color scale
  scale_color_viridis_c(trans = "log") +
  scale_x_log10() + 
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom",
        # Expand the legend width ...
        legend.key.width = unit(2.5, "cm"),
        legend.key.height = unit(.5, "cm")) + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow") 
```
# Model Building 
```{r}
set.seed(123)
# Bad form to perform simple transformations on the outcome variable within a 
# recipe. So, we'll do it here.
camels <- camels |> 
  mutate(logQmean = log(q_mean))

# Generate the split
camels_split <- initial_split(camels, prop = 0.8)
camels_train <- training(camels_split)
camels_test  <- testing(camels_split)

camels_cv <- vfold_cv(camels_train, v = 10)
```
```{r}
# Create a recipe to preprocess the data
rec <-  recipe(logQmean ~ aridity + p_mean, data = camels_train) %>%
  # Log transform the predictor variables (aridity and p_mean)
  step_log(all_predictors()) %>%
  # Add an interaction term between aridity and p_mean
  step_interact(terms = ~ aridity:p_mean) |> 
  # Drop any rows with missing values in the pred
  step_naomit(all_predictors(), all_outcomes())
```
```{r}
# Prepare the data
baked_data <- prep(rec, camels_train) |> 
  bake(new_data = NULL)

# Interaction with lm
#  Base lm sets interaction terms with the * symbol
lm_base <- lm(logQmean ~ aridity * p_mean, data = baked_data)
summary(lm_base)
```
```{r}
# Sanity Interaction term from recipe ... these should be equal!!
summary(lm(logQmean ~ aridity + p_mean + aridity_x_p_mean, data = baked_data))
```
```{r}
test_data <-  bake(prep(rec), new_data = camels_test)
test_data$lm_pred <- predict(lm_base, newdata = test_data)
```
```{r}
metrics(test_data, truth = logQmean, estimate = lm_pred)
```
```{r}
ggplot(test_data, aes(x = logQmean, y = lm_pred, colour = aridity)) +
  # Apply a gradient color scale
  scale_color_gradient2(low = "brown", mid = "orange", high = "darkgreen") +
  geom_point() +
  geom_abline(linetype = 2) +
  theme_linedraw() + 
  labs(title = "Linear Model: Observed vs Predicted",
       x = "Observed Log Mean Flow",
       y = "Predicted Log Mean Flow",
       color = "Aridity")
```
# Using a workflow
```{r}
# Define model
lm_model <- linear_reg() %>%
  # define the engine
  set_engine("lm") %>%
  # define the mode
  set_mode("regression")

# Instantiate a workflow ...
lm_wf <- workflow() %>%
  # Add the recipe
  add_recipe(rec) %>%
  # Add the model
  add_model(lm_model) %>%
  # Fit the model to the training data
  fit(data = camels_train) 

# Extract the model coefficients from the workflow
summary(extract_fit_engine(lm_wf))$coefficients
```
```{r}
# From the base implementation
summary(lm_base)$coefficients
```
```{r}
#
lm_data <- augment(lm_wf, new_data = camels_test)
dim(lm_data)
```
```{r}
metrics(lm_data, truth = logQmean, estimate = .pred)
```
```{r}
ggplot(lm_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw()
```
# Switch it up
```{r}
library(baguette)
rf_model <- rand_forest() %>%
  set_engine("ranger", importance = "impurity") %>%
  set_mode("regression")

rf_wf <- workflow() %>%
  # Add the recipe
  add_recipe(rec) %>%
  # Add the model
  add_model(rf_model) %>%
  # Fit the model
  fit(data = camels_train) 
```
```{r}
rf_data <- augment(rf_wf, new_data = camels_test)
dim(rf_data)
```
```{r}
metrics(rf_data, truth = logQmean, estimate = .pred)
```
```{r}
ggplot(rf_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw()
```
```{r}
wf <- workflow_set(list(rec), list(lm_model, rf_model)) %>%
  workflow_map('fit_resamples', resamples = camels_cv) 

autoplot(wf)
```
```{r}
rank_results(wf, rank_metric = "rsq", select_best = TRUE)
```
# Question 3 
```{r}
xgb_model <- boost_tree(mode = "regression") %>%
  set_engine("xgboost")
```
```{r}
nnet_model <- bag_mlp(mode = "regression") %>%
  set_engine("nnet")
```
```{r}
xgb_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(xgb_model) %>%
  fit(data = camels_train)

nnet_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(nnet_model) %>%
  fit(data = camels_train)
```
```{r}
xgb_preds <- predict(xgb_wf, camels_test) %>%
  bind_cols(camels_test)

nnet_preds <- predict(nnet_wf, camels_test) %>%
  bind_cols(camels_test)

metrics_xgb <- xgb_preds %>%
  metrics(truth = aridity, estimate = .pred)

metrics_nnet <- nnet_preds %>%
  metrics(truth = aridity, estimate = .pred)
print(metrics_xgb)
```
```{r}
wf <- workflow_set(
  preproc = list(rec),  # your recipe
  models = list(
    linear = lm_model,
    random_forest = rf_model,
    xgboost = xgb_model,
    bagged_nnet = nnet_model
  )
) %>%
  workflow_map("fit_resamples", resamples = camels_cv)
```
```{r}
rank_results(wf, rank_metric = "rsq", select_best = TRUE)
# Based off of these results, I would go with the neural network model since it outperformed the other models both in rmse and rsq. 
```
# Question 4
```{r}
camels |> 
  select(q_mean, runoff_ratio, low_prec_freq) |> 
  drop_na() |> 
  cor()
camels_clean <- camels %>%
  filter(!is.na(runoff_ratio) & !is.na(low_prec_freq))
camels_clean <- camels_clean %>%
  mutate(runoff_ratio_log = log(runoff_ratio + 1))
```
## Data Splitting
```{r}
set.seed(142)

camels_split3 <- initial_split(camels_clean, prop = 0.75)
camels_train3 <- training(camels_split3)
camels_test3 <- testing(camels_split3)

camels_cv3 <- vfold_cv(camels_train3, v = 10)
```

## Recipe 
```{r}
rec3 <- recipe(logQmean ~ runoff_ratio_log + low_prec_freq, data = camels_train3) %>%
  step_interact(terms = ~ runoff_ratio_log:low_prec_freq) %>%
  step_naomit(all_predictors(), all_outcomes())
# I wanted to use low precipitation frequency and runoff ratio because I felt like they would both have a good relationship with our streamflow mean. Runoff ratio was skewed to the right so I added a log transform but I kept low_prec_freq as is because the distribution looked relatively normal. 
```

## Define 3 Models
```{r}
randf_model <- rand_forest(mtry = 2, trees = 500) %>%
  set_engine("ranger") %>%
  set_mode("regression")
```
```{r}
linm_model <- linear_reg() %>%
  set_engine("lm") %>%
  set_mode("regression")
```
```{r}
svm_model <- svm_rbf() %>%
  set_engine("kernlab") %>%
  set_mode("regression")
```
## Workflow Set
```{r}
wf_set <- workflow_set(
  preproc = list(rec3), 
  models = list(randf_model, linm_model, svm_model) 
)

wf_results <- wf_set %>%
  workflow_map("fit_resamples", resamples = camels_cv3)
```
## Evaluation 
```{r}
autoplot(wf_results)
ranked_results <- rank_results(wf_results)
ranked_results
# It looks like random forest works the best because it performs the best in the department of rmse and rsq. 
```
## Extract and Evaluate
```{r}
rf_workflow <- workflow() %>%
  add_recipe(rec3) %>%
  add_model(randf_model)

rf_fit <- rf_workflow %>%
  fit(data = camels_train3)

rf_predictions <- rf_fit %>%
  augment(new_data = camels_test3)

ggplot(rf_predictions, aes(x = logQmean, y = .pred)) +
  geom_point(aes(color = abs(logQmean - .pred)), size = 3, alpha = 0.7) +
  scale_color_viridis_c() +
  labs(
    title = "Observed vs Predicted LogQmean (Random Forest Model)",
    x = "Observed LogQmean",
    y = "Predicted LogQmean",
    color = "Absolute Error"
  ) +
  theme_minimal()
# I believe the random forest model is extraordinarily accurate based off of this graph. The points are in a relative straight line and there's not a lot of spread between them. 
```